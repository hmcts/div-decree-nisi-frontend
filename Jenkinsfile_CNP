#!groovy

import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

String product = "div"
String component = "dn"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'div-${env}': [
    secret('session-secret', 'SESSION_SECRET'),
    secret('redis-secret', 'REDIS_ENCRYPTION_SECRET'),
    secret('idam-secret', 'IDAM_SECRET'),
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def labels = [
  "enable_html_test",
  "enable_full_functional_test",
  "enable_fortify_scan"
]

def populateLabelStates(labels) {
  def states = [:]
  // Get labels from GitHub repo
  def repoLabels = new GithubAPI(this).getLabelsbyPattern(env.BRANCH_NAME, "enable_")

  // Check existence of provided label, and store in labelStates map
  def getLabelState = { label ->
    if (label == "atLeastOneEnabled") {
      return
    }
    def labelExists = repoLabels.contains(label) ? true : false
    states.put(label, labelExists)
  }

  // Iterate over labels List to build labelStates map
  labels.each { label -> getLabelState(label) }

  // Hardcode enable_all label
  if (!states.containsKey("enable_all")) {
    getLabelState("enable_all")
  }

  // Check if at least one label is true
  states.put("atLeastOneEnabled", states.any {key, value -> value == true })

  return states
}
labelStates = populateLabelStates(labels)

def checkLabel(label) {
  return (labelStates.enable_all || labelStates.get(label))
}

withPipeline("nodejs", product, component) {
  enableAksStagingDeployment()
  loadVaultSecrets(secrets)
  disableLegacyDeployment()

  before('securitychecks') {
    stage('Test HTML') {
      yarnBuilder.yarn('test:validation')
      yarnBuilder.yarn('test:a11y')
    }
    stage('Test E2E') {
      yarnBuilder.yarn('test:e2e')
    }
  }

  before('functionalTest:aks') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:preview') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:aat') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
}

if (checkLabel("atLeastOneEnabled")) {
  properties([
    pipelineTriggers([cron('00 22 * * *')]),
    parameters([
      string(name: 'URL_TO_TEST', defaultValue: "https://${product}-${component}-pr-${CHANGE_ID}.service.core-compute-preview.internal", description: 'The URL you want to run these tests against'),
    ])
  ])

  withNightlyPipeline("nodejs", product, component) {
    onPR() {
      env.TEST_URL = params.URL_TO_TEST
      env.NODE_ENV = 'ci'
      env.test_environment = 'aat'

      loadVaultSecrets(secrets)

      before('securitychecks') {
        if (checkLabel("enable_html_test")) {
          stage('Test HTML') {
            yarnBuilder.yarn('test:validation')
            yarnBuilder.yarn('test:a11y')
          }
        }

        if (checkLabel("enable_full_functional_test")) {
          enableFullFunctionalTest()

          after('fullfunctionalTest') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
          }
        }

        if (checkLabel("enable_fortify_scan")) {
          enableFortifyScan()

          after('fortify-scan') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
          }
        }
      }
    }
  }
}
