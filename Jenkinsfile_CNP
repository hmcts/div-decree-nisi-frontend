#!groovy
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

String product = "div"
String component = "dn"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'div-${env}': [
    secret('session-secret', 'SESSION_SECRET'),
    secret('redis-secret', 'REDIS_ENCRYPTION_SECRET'),
    secret('idam-secret', 'IDAM_SECRET'),
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def checkForNightlyTestLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "nightly").contains("nightly_tests")
}

if (checkForNightlyTestLabel(env.BRANCH_NAME)) {
  String prIngress = "https://div-dn-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  properties([
    pipelineTriggers([cron('00 22 * * *')]),
    parameters([
      string(name: 'URL_TO_TEST', defaultValue: prIngress, description: 'The URL you want to run these tests against'),
    ])
  ])

  withNightlyPipeline("nodejs", product, component) {
    env.TEST_URL = prIngress
    env.NODE_ENV = 'ci'
    env.test_environment = 'aat'

    loadVaultSecrets(secrets)
    enableCrossBrowserTest()
    enableFullFunctionalTest()
    enableFortifyScan()

    before('securitychecks') {
      stage('Test HTML') {
        yarnBuilder.yarn('test:validation')
        yarnBuilder.yarn('test:a11y')
      }

      after('crossBrowserTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
      }

      after('fullfunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
      }

      after('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
      }

    }
  }
} else {
  withPipeline("nodejs", product, component) {
    enableAksStagingDeployment()
    loadVaultSecrets(secrets)
    disableLegacyDeployment()

    before('securitychecks') {
      stage('Test HTML') {
        yarnBuilder.yarn('test:validation')
        yarnBuilder.yarn('test:a11y')
      }
      stage('Test E2E') {
        yarnBuilder.yarn('test:e2e')
      }
    }

    before('functionalTest:aks') {
      env.NODE_ENV= 'ci'
      sh 'printenv'
    }

    before('functionalTest:preview') {
      env.NODE_ENV= 'ci'
      sh 'printenv'
    }

    before('functionalTest:aat') {
      env.NODE_ENV= 'ci'
      sh 'printenv'
    }

    after('functionalTest:preview') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }

    after('functionalTest:aat') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }
  }
}

